name: Deploy Backend via SSM

on:
  push:
    tags:
      - "v*"           # K√≠ch ho·∫°t khi c√≥ tag m·ªõi ƒë∆∞·ª£c push (v√≠ d·ª• v1.0.0)
  workflow_dispatch:
    inputs:
      rollback_tag:
        description: "Specify git tag to rollback (e.g. v1.0.2)"
        required: false
        type: string

jobs:
  deploy:
    name: Deploy backend to EC2 via SSM
    runs-on: be-runner

    env:
      AWS_REGION: ap-southeast-2
      ROLE_TAG: backend-ec2

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0   # Quan tr·ªçng ƒë·ªÉ c√≥ ƒë·ªß tag v√† l·ªãch s·ª≠ commit

      - name: Fetch all tags
        run: |
          git tag -l | xargs git tag -d # Delete local tags
          git fetch --tags

      # Determine version (auto t·ª´ tag ho·∫∑c rollback th·ªß c√¥ng)
      - name: Determine version to deploy
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ inputs.rollback_tag }}" ]; then
            echo "üïπ Manual rollback requested for tag: ${{ inputs.rollback_tag }}"
            echo "DEPLOY_VERSION=${{ inputs.rollback_tag }}" >> $GITHUB_ENV
            echo "MODE=rollback" >> $GITHUB_ENV
          else
            TAG_NAME="${GITHUB_REF#refs/tags/}"
            echo "üöÄ Auto deploy triggered by tag: $TAG_NAME"
            echo "DEPLOY_VERSION=$TAG_NAME" >> $GITHUB_ENV
            echo "MODE=auto" >> $GITHUB_ENV
          fi

      # Validate rollback tag (n·∫øu workflow_dispatch)
      - name: Validate rollback tag
        if: env.MODE == 'rollback'
        run: |
          TAG=${{ inputs.rollback_tag }}
          echo "üîç Checking if tag '$TAG' exists..."
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "‚úÖ Tag '$TAG' exists. Proceeding with rollback."
          else
            echo "‚ùå Tag '$TAG' does not exist!"
            echo ""
            echo "üìú Available recent tags:"
            git tag --sort=-creatordate | head -n 5 || echo "No tags found."
            exit 1
          fi

      # Checkout to the version being deployed
      - name: Checkout to target version
        run: |
          git checkout $DEPLOY_VERSION
          echo "‚úÖ Checked out to version: $DEPLOY_VERSION"

      # Optional: Build/test if needed
      # - name: Build backend
      #   run: npm ci && npm run build

      # Deploy via AWS SSM
      - name: Deploy via AWS SSM
        run: |
          echo "üöÄ Deploying backend via SSM..."
          INSTANCE_IDS=$(aws ec2 describe-instances \
            --filters "Name=tag:Role,Values=$ROLE_TAG" "Name=instance-state-name,Values=running" \
            --query "Reservations[].Instances[].InstanceId" \
            --output text --region $AWS_REGION)

          echo "üì¶ Target instances: $INSTANCE_IDS"

          if [ -z "$INSTANCE_IDS" ]; then
            echo "‚ùå No running instances found with tag Role=$ROLE_TAG"
            exit 1
          fi

          COMMAND_ID=$(aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --targets "Key=tag:Role,Values=$ROLE_TAG" \
            --comment "CI/CD Deploy backend ($DEPLOY_VERSION)" \
            --parameters 'commands=[
              "sudo chown -R ubuntu:ubuntu /home/ubuntu/",
              "sudo su - ubuntu -c \"cd /home/ubuntu/Social-App-BE && git tag -l | xargs git tag -d && git fetch --all --tags && git checkout '"$DEPLOY_VERSION"' && pm2 restart all\""
            ]' \
            --max-concurrency "50%" \
            --region $AWS_REGION \
            --query "Command.CommandId" \
            --output text)

          echo "‚úÖ Sent command with ID: $COMMAND_ID"
          echo "‚è≥ Waiting for command to finish..."
          aws ssm list-command-invocations \
            --command-id "$COMMAND_ID" \
            --details \
            --region $AWS_REGION
